package vista;

import conexion.Conexion;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.ArrayList;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;

/**
 *
 * @author Ivon
 */
public class InterGraficarVentas extends javax.swing.JInternalFrame {

    ArrayList<Integer> listaCantidad = new ArrayList<>();
    ArrayList<String> listaFechas = new ArrayList<>();
    int cantidadResultados = 0;
    String[] vector_fechaVenta;
    int[] vector_status_cantidad;

    //Constructor
    public InterGraficarVentas() {
        initComponents();
        this.setSize(new Dimension(550, 650));
        this.setTitle("Historial de Ventas");
        this.MetodoContador();
        vector_fechaVenta = new String[cantidadResultados];
        vector_status_cantidad = new int[cantidadResultados];
        this.MetodoAlmacenaDatos();

    }

    //Metodo para determinar la cantidad de resultados a graficar
    private int MetodoContador() {
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "SELECT fechaVenta, COUNT(fechaVenta) AS Ventas "
                    + "FROM tb_cabecera_venta "
                    + "WHERE fechaVenta BETWEEN ? AND ? "
                    + "GROUP BY fechaVenta");
            pst.setString(1, InterGraficas.fecha_inicio);
            pst.setString(2, InterGraficas.fecha_fin);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                cantidadResultados++;
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error en: " + e);
        }
        return cantidadResultados;
    }

    //Método para almacenar en las listas los datos a graficar
    private void MetodoAlmacenaDatos() {
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "SELECT fechaVenta, COUNT(fechaVenta) AS Ventas FROM tb_cabecera_venta "
                    + "WHERE fechaVenta BETWEEN ? AND ? GROUP BY fechaVenta");
            pst.setString(1, InterGraficas.fecha_inicio);
            pst.setString(2, InterGraficas.fecha_fin);
            ResultSet rs = pst.executeQuery();
            int contador = 0;
            while (rs.next()) {
                vector_fechaVenta[contador] = rs.getString("fechaVenta");
                listaFechas.add(vector_fechaVenta[contador]);
                vector_status_cantidad[contador] = rs.getInt("Ventas");
                listaCantidad.add(vector_status_cantidad[contador]);

                contador++;
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error en: " + e);
        }
    }

    //Método para determinar cual es el dia de mayor cantidad de ventas
    public int MetodoMayorVenta(ArrayList<Integer> listaCantidad) {
        int mayor = 0;
        for (int i = 0; i < listaCantidad.size(); i++) {
            if (listaCantidad.get(i) > mayor) {
                mayor = listaCantidad.get(i);
            }
        }
        return mayor;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Seleccione fechas a Graficar");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 0, 310, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    //Método que dibuja las gráficas
    @Override
    public void paint(Graphics g) {
        super.paint(g);

        int mayorVenta = MetodoMayorVenta(listaCantidad);
        int largo_NuevoIngreso = 0;
        int parametro1 = 133;
        int parametroFecha = 118;
        int parametro3 = 100;

        for (int i = 0; i < listaCantidad.size(); i++) {
            largo_NuevoIngreso = listaCantidad.get(i) * 400 / mayorVenta;
            if (i == 0) {
                g.setColor(new Color(119, 51, 255)); //Morado
            } else if (i == 1) {
                g.setColor(new Color(255, 0, 0)); //Rojo
            } else if (i == 2) {
                g.setColor(new Color(0, 0, 0)); //Negro
            } else if (i == 3) {
                g.setColor(new Color(255, 255, 255)); //Blanco
            } else if (i == 4) {
                g.setColor(new Color(53, 195, 113)); //Verde
            } else if (i == 5) {
                g.setColor(new Color(0, 0, 255)); //Azul
            } else if (i == 6) {
                g.setColor(new Color(14, 181, 211)); //Celeste
            } else {
                g.setColor(new Color(249, 73, 174)); //Rosa
            }
            g.fillRect(100, parametro3, largo_NuevoIngreso, 40);
            g.drawString(listaFechas.get(i), 10, parametroFecha);
            g.drawString("Cantidad: " + listaCantidad.get(i), 10, parametro1);
            parametro1 += 50;
            parametroFecha += 50;
            parametro3 += 50;
        }
    }
}
