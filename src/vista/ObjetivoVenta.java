package vista;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.sql.PreparedStatement;
import java.sql.Connection;
import conexion.Conexion;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import static java.awt.image.ImageObserver.WIDTH;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Ivon
 */
public class ObjetivoVenta extends javax.swing.JInternalFrame {

    private int idVendedor;

    private double porcentajeGananciaMinorista;
    private double porcentajeGananciaMayorista;

    private Date fechaInicioSeleccionada;
    private Date fechaFinSeleccionada;

    public ObjetivoVenta() {
        initComponents();
        this.setSize(new Dimension(900, 435));
        this.setTitle("Objetivo Venta");

        //Insertar imagen en nuestro jLabel
        ImageIcon wallpaper = new ImageIcon("src/img/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(900, 435, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();

        // Llenar jTable con datos de vendedores
        llenarTablaVendedores();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_ObjetivoVenta = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton_descargar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jDateChooser_fecha_inicio = new com.toedter.calendar.JDateChooser();
        jDateChooser_fecha_fin = new com.toedter.calendar.JDateChooser();
        jButton_guardar = new javax.swing.JButton();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Objetivo Venta");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_ObjetivoVenta.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTable_ObjetivoVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        jScrollPane1.setViewportView(jTable_ObjetivoVenta);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 710, 210));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 730, 220));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_descargar.setBackground(new java.awt.Color(51, 153, 255));
        jButton_descargar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_descargar.setText("Descargar Ventas");
        jButton_descargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_descargarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_descargar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 140, 30));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 50, 140, 220));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Seleccione Fechas para calcular las Ventas:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 310, 20));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Fecha Inicio:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Fecha Fin:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, -1, -1));
        jPanel3.add(jDateChooser_fecha_inicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 140, -1));
        jPanel3.add(jDateChooser_fecha_fin, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 40, 140, -1));

        jButton_guardar.setBackground(new java.awt.Color(153, 255, 153));
        jButton_guardar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton_guardar.setText("Guardar");
        jButton_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_guardarActionPerformed(evt);
            }
        });
        jPanel3.add(jButton_guardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 30, 100, 40));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 870, 100));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 410));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_descargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_descargarActionPerformed
        if (fechaInicioSeleccionada != null && fechaFinSeleccionada != null) {
            // Obtener el ID del vendedor seleccionado en la tabla
            int filaSeleccionada = jTable_ObjetivoVenta.getSelectedRow();
            if (filaSeleccionada != -1) { // Si se ha seleccionado una fila
                int idVendedor = (int) jTable_ObjetivoVenta.getValueAt(filaSeleccionada, 0); // Suponiendo que la primera columna contiene el ID del vendedor
                generarReporteVentasVendedorExcel(idVendedor, fechaInicioSeleccionada, fechaFinSeleccionada);
            } else {
                JOptionPane.showMessageDialog(this, "Seleccione un vendedor para generar el reporte.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione una fecha de inicio y una fecha de fin.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton_descargarActionPerformed

    private void jButton_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_guardarActionPerformed
        fechaInicioSeleccionada = jDateChooser_fecha_inicio.getDate();
        fechaFinSeleccionada = jDateChooser_fecha_fin.getDate();
        if (fechaInicioSeleccionada != null && fechaFinSeleccionada != null) {
            JOptionPane.showMessageDialog(this, "Fechas guardadas correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            // Vaciar los campos de las fechas
            jDateChooser_fecha_inicio.setDate(null);
            jDateChooser_fecha_fin.setDate(null);
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione una fecha de inicio y una fecha de fin antes de guardar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton_guardarActionPerformed

    private void generarReporteVentasVendedorExcel(int idVendedor, Date fechaInicio, Date fechaFin) {
        // Define la ruta completa del archivo con su nombre y extensión
        String rutaCarpeta = System.getProperty("user.home") + "/Escritorio/Excel/";
        File carpetaExcel = new File(rutaCarpeta);
        if (!carpetaExcel.exists()) {
            carpetaExcel.mkdirs();
        }
        String rutaArchivo = rutaCarpeta + "Reporte_Objetivo_Ventas_" + idVendedor + ".xlsx";

        // Crear un libro de trabajo Excel y una hoja
        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet sheet = workbook.createSheet("Ventas");

        // Crear la cabecera del reporte
        Row headerRow = sheet.createRow(0);
        String[] columnas = {"ID Venta", "Fecha de Venta", "Vendedor", "Tipo de Venta", "Monto Venta", "Porcentaje Ganancia", "ID Vendedor", "Ganancia"};
        for (int i = 0; i < columnas.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(columnas[i]);
        }

        try {
            // Obtener datos de ventas del vendedor seleccionado y llenar el reporte
            try (Connection cn = Conexion.conectar(); PreparedStatement pst = cn.prepareStatement(
                    "SELECT v.idVenta, v.fechaVenta, v.vendedor, v.tipoVenta, v.monto AS montoVenta, "
                    + "v.porcentajeGanancia, v.idVendedor, "
                    + "(SELECT CASE "
                    + "WHEN v.tipoVenta = 'Precio Minorista' THEN v.monto * v.porcentajeGanancia "
                    + "WHEN v.tipoVenta = 'Precio Mayorista' THEN v.monto * v.porcentajeGanancia "
                    + "ELSE 0 END) AS ganancia "
                    + "FROM tb_ventas v "
                    + "WHERE v.idVendedor = ? AND v.fechaVenta BETWEEN ? AND ?"
                    + "ORDER BY v.fechaVenta DESC;")) {
                pst.setInt(1, idVendedor);
                pst.setDate(2, new java.sql.Date(fechaInicio.getTime()));
                pst.setDate(3, new java.sql.Date(fechaFin.getTime()));
                ResultSet rs = pst.executeQuery();

                int rowNum = 1;
                while (rs.next()) {
                    Row row = sheet.createRow(rowNum++);
                    row.createCell(0).setCellValue(rs.getString("idVenta"));
                    row.createCell(1).setCellValue(rs.getString("fechaVenta"));
                    row.createCell(2).setCellValue(rs.getString("vendedor"));
                    row.createCell(3).setCellValue(rs.getString("tipoVenta"));
                    row.createCell(4).setCellValue(rs.getString("montoVenta"));
                    // Convertir el porcentaje a un valor entero y agregar el símbolo "%"
                    double porcentaje = Double.parseDouble(rs.getString("porcentajeGanancia")) * 100;
                    row.createCell(5).setCellValue((int) porcentaje + "%"); // Mostrar el porcentaje como entero sin decimales
                    row.createCell(6).setCellValue(rs.getString("idVendedor"));
                    // Formatear la ganancia con dos decimales
                    double ganancia = Double.parseDouble(rs.getString("ganancia"));
                    DecimalFormat df = new DecimalFormat("#.##"); // Formato para dos decimales
                    String gananciaFormateada = df.format(ganancia);
                    row.createCell(7).setCellValue(gananciaFormateada);
                }

                // Guardar el libro de trabajo en el archivo especificado
                try (FileOutputStream outputStream = new FileOutputStream(rutaArchivo)) {
                    workbook.write(outputStream);
                    JOptionPane.showMessageDialog(this, "Reporte generado con éxito");

                    // Abrir el archivo Excel después de guardarlo
                    File archivo = new File(rutaArchivo);
                    if (Desktop.isDesktopSupported()) {
                        Desktop.getDesktop().open(archivo);
                    } else {
                        JOptionPane.showMessageDialog(this, "No se pudo abrir el archivo automáticamente.");
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error al guardar el archivo Excel.");
                }
            } catch (SQLException e) {
                e.printStackTrace(System.err);
                JOptionPane.showMessageDialog(this, "Error al obtener datos de ventas.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al generar el reporte de ventas en Excel.");
        }
    }

    private double obtenerVentas(String tipoVenta) {
        double ventasTotales = 0.0;
        try {
            Connection cn = Conexion.conectar();
            String sql = "SELECT SUM(monto) AS totalVentas FROM tb_ventas WHERE tipoVenta = ?";
            PreparedStatement pst = cn.prepareStatement(sql);
            pst.setString(1, tipoVenta);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                ventasTotales = rs.getDouble("totalVentas");
            }

            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al obtener ventas: " + e);
        }
        return ventasTotales;
    }

    // Método para llenar el jTable con datos de vendedores
    private void llenarTablaVendedores() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Vendedor");
        modelo.addColumn("Nombre");
        modelo.addColumn("Apellido");

        try {
            // Establecer conexión a la base de datos
            Connection cn = Conexion.conectar();

            String sql = "SELECT idVendedor, nombre, apellido FROM tb_vendedor";
            PreparedStatement statement = cn.prepareStatement(sql);
            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                Object[] fila = new Object[3];
                fila[0] = resultSet.getInt("idVendedor");
                fila[1] = resultSet.getString("nombre");
                fila[2] = resultSet.getString("apellido");
                modelo.addRow(fila);
            }

            // Asignar el modelo de datos al jTable
            jTable_ObjetivoVenta.setModel(modelo);

            // Cerrar conexión
            cn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private double calcularGananciaSegunTipoVenta(double totalVentas, double porcentajeGanancia, String tipoVenta) {
        // Lógica para calcular la ganancia según el tipo de venta y el porcentaje de ganancia
        double ganancia = 0.0;
        if (tipoVenta.equals("precioMinorista")) {
            ganancia = totalVentas * (porcentajeGanancia / 100);
        } else if (tipoVenta.equals("precioMayorista")) {
            // Lógica para calcular la ganancia para ventas mayoristas
            ganancia = totalVentas * (porcentajeGanancia / 100);
        }
        return ganancia;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_descargar;
    private javax.swing.JButton jButton_guardar;
    private com.toedter.calendar.JDateChooser jDateChooser_fecha_fin;
    private com.toedter.calendar.JDateChooser jDateChooser_fecha_inicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_ObjetivoVenta;
    // End of variables declaration//GEN-END:variables

    /*
    * Método para limpiar
    *
     */
 /*
    private void Limpiar() {
      
    } */
}
